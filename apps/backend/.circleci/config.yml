version: 2
jobs:
  build:
    docker:
    - image: "circleci/openjdk:11"
    - image: "google/cloud-sdk:252.0.0"
    steps:
    - checkout
    - setup_remote_docker
    # Since we use the docker tag in another part of the build we make sure its the same across the jobs
    - run:
        name: Generate version number and docker image tags
        command: |
          mkdir /tmp/workspace
          export RELEASE_VERSION=$CIRCLE_BUILD_NUM
          echo "export RELEASE_VERSION=$RELEASE_VERSION" >> /tmp/workspace/properties.env
          echo "export DOCKER_TAG=\"$CIRCLE_PROJECT_REPONAME:$RELEASE_VERSION\"" >> /tmp/workspace/properties.env
          cat /tmp/workspace/properties.env >> $BASH_ENV
    - run:
        name: Build application
        command: mvn clean install
    - run:
        name: Build docker image
        command: docker build --build-arg version=$RELEASE_VERSION --build-arg app_name=$CIRCLE_PROJECT_REPONAME -t gcr.io/datajegerne/navikt/$DOCKER_TAG .
    - persist_to_workspace:
        root: /tmp/workspace
        paths:
          - properties.env
  deploy_to_staging:
    docker:
      - image: google/cloud-sdk
    environment:
      - PROJECT_NAME: "datajegerne"
      - GOOGLE_PROJECT_ID: "datajegerne"
      - GOOGLE_COMPUTE_ZONE: "europe-north1-b"
      - GOOGLE_CLUSTER_NAME: "datajegerne-cluster"
    steps:
      - checkout
      - run:
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
#           export RELEASE_VERSION=$CIRCLE_BUILD_NUM
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - setup_remote_docker
      - run:
          name: Docker build and push
          command: |
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
            echo "koko"
            docker push gcr.io/${GOOGLE_PROJECT_ID}/navikt/${DOCKER_TAG}
#      - run:
#          name: Deploy to Kubernetes
#          command: |
#            envsubst < ${HOME}/project/k8s.yml > ${HOME}/patched_k8s.yml
#            kubectl apply -f ${HOME}/patched_k8s.yml
#            kubectl rollout status deployment/${PROJECT_NAME}
workflows:
  version: 2
  build_and_release:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
      - deploy_to_staging:
          requires:
            - build
          filters:
            branches:
              ignore: master
#          filters:
#            branches:
#              only:
#                - dev
#                - master